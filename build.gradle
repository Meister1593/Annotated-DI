//file:noinspection GroovyAssignabilityCheck
plugins {
	// Dependencies
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
	// Mod Hosting Publish
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '1.1.0'
	// Maven Publish
	id 'maven-publish'
	id 'signing'
	id 'io.codearte.nexus-staging' version '0.30.0'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	implementation "com.google.inject:guice:${project.guice_version}"
	shadow "com.google.inject:guice:${project.guice_version}"

	implementation "org.reflections:reflections:${project.reflections_version}"
	shadow "org.reflections:reflections:${project.reflections_version}"

	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

java {
	withSourcesJar()
	withJavadocJar()
}

shadowJar {
	relocate("org.reflections", "${group}.shadowed.org.reflections")
	relocate("com.google.inject", "${group}.shadowed.com.google.inject")

	configurations = [project.configurations.shadow]
	classifier "shadow"
}

remapJar {
	dependsOn(shadowJar)
	input.set(shadowJar.archivePath)
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

if (hasProperty('curseForgeApiKey')) {
	curseforge {
		apiKey = curseForgeApiKey
		project {
			id = '000000'
			changelog = file('changelog.txt')
			releaseType = project.release_type
			addGameVersion project.minecraft_version
			addGameVersion 'Java 16'
			addGameVersion 'Fabric'
			mainArtifact(new File(new File(buildDir, "libs"), "$archivesBaseName-${version}.jar")) {
				displayName = "$archivesBaseName-$version"
			}
		}
		options {
			javaIntegration = false
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
if (hasProperty('modrinthApiKey')) {
	task publishModrinth(type: TaskModrinthUpload) {
		token = modrinthApiKey
		projectId = '00000000'
		versionNumber = version
		versionName = project.mod_version
		uploadFile = new File(new File(buildDir, "libs"), "$archivesBaseName-${version}.jar")
		changelog = file('changelog.txt').getText()
		releaseType = project.release_type
		addGameVersion(project.minecraft_version as String)
		addLoader('fabric')
	}
}

if (hasProperty('nexusUsername')) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
				artifact javadocJar
				pom {
					name = 'Annotated DI'
					packaging = 'jar'
					description = 'A wrapper around Guice with a few extra utilities for use with Minecraft mods.'
					url = 'https://www.curseforge.com/minecraft/mc-mods/annotated-di'
					scm {
						connection = "scm:svn:https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}.git"
						developerConnection = "scm:svn:https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}.git"
						url = "https://github.com/The-Fireplace-Minecraft-Mods/${project.github_slug}"
					}

					licenses {
						license {
							name = 'Apache License 2.0'
							url = 'https://www.apache.org/licenses/LICENSE-2.0'
						}
					}

					developers {
						developer {
							id = 'the_fireplace'
							name = 'The_Fireplace'
							email = 'the.f1repl4ce@gmail.com'
						}
					}
				}
			}
		}
		repositories {
			maven {
				def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
				def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
				credentials {
					username = nexusUsername
					password = nexusPassword
				}
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}
}